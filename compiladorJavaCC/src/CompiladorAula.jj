/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(CompiladorAula)
public class CompiladorAula{
    public static void main(final String[] args) throws ParseException  {    CompiladorAula parser = new CompiladorAula(System.in);    while (true)    {      System.out.println("Escreva um programa:");      try      {        switch (CompiladorAula.main())        {          case 0 :           System.out.println("Boa! Menor tá ligeiro na linguagem dos cria.");          break;          case 1 :           System.out.println("Terminou.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("Ta moscando menor?");        System.out.println(e.getMessage());        CompiladorAula.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(CompiladorAula)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : {  < INICIOPROGRAMA : "bora dar um piao" >| < PONTOVIRGULA : ";" >
| < VIRGULA : ",">| < ABREBLOCO : "{" >| < FIMBLOCO : "}" >
| < INTEIRO : "redondo" >
| < ATRIBUICAO: "recebe" >
| < BOOLEANA: "seloco" >
| < STRING: "desbaratinar uma ideia">
}TOKEN :{
 < NUMERO: (<DIGITO>)+ ( "." (<DIGITO>)+ )?>| < #DIGITO : [ "0"-"9" ] >
| < IF: "se pa" >
| < ELSE: "senao mete um migue">
| < FOR: "repete essa porra" >
| < TO: "ate" >
| < DO: "lanca ai">
| < TRUE: "bagulho eh memo">
| < FALSE: "bagulho eh cao" >
| < ID: < LETRA >(< LETRA > | ["0" - "9", "_"])*>
| < LETRA : ["A"-"Z"] | ["a"-"z"] >
| < PALAVRA: (< LETRA >)+>}
TOKEN : {	/*OPERADORES LÓGICOS*/

	< MAIOR: "eh maior" >
|	< MENOR: "eh menor" >
|	< MENOR_IGUAL: "eh menor ou igual" >
|	< MAIOR_IGUAL: "eh maior ou igual" >
|	< DIFERENTE: "eh diferente" >
|	< IGUAL: "eh gemeo" >
|   < AND : "&&" >
|   < OR: "||" >
|   < SOMA: "+" >
|	< SUBTRACAO: "-" >
|	< MULTIPLICACAO: "*" >
|	< DIVISAO: "/" >	
}
int main() :{}{< INICIOPROGRAMA > < ABREBLOCO >

/* PODE OU NÃO TER CÓDIGO */
(comando())*

< FIMBLOCO >
{return 0;}}

void comando() : {} 
{
  	/* PODE SER:
  		ATRIBUIÇÃO DE VARIÁVEL
  	 	DECLARAÇÃO DE VARIÁVEL
  	 	EXPRESSÃO MATEMÁTICA
		CONDICIONAL
		UM DOS 2 LAÇOS DE REPETIÇÃO
  	 */
	
  	 atribuir_ou_expressao() |
  	 declaracaoVariavel() |
  	 if_funcao()|
  	 for_funcao() |
  	 do_funcao()
}

void atribuir_ou_expressao(): { } {
	((< ID > atribuicao() | expressao_matematica()) | (< NUMERO > expressao_matematica() )) < PONTOVIRGULA > 
}

void for_funcao(): { }
{
  < FOR > variavel_for() < TO > variavel_for() < ABREBLOCO >

	/* PODE OU NÃO TER VÁRIOS IF/FOR/DO ENCADEADO */
  (comando())*

  < FIMBLOCO >
}

void variavel_for(): { } {
	< ID >|< NUMERO >
	}

void if_funcao(): { }
{
  < IF > expressao_logica() < ABREBLOCO >
	
	/* PODE OU NÃO TER VÁRIOS IF/FOR/DO ENCADEADO */
  (comando())*

  < FIMBLOCO >

  (< ELSE > < ABREBLOCO >

  /* PODE OU NÃO TER VÁRIOS IF/FOR/DO ENCADEADO */
  (comando())*

  < FIMBLOCO >)?
}


void do_funcao(): { }
{
  < DO > < ABREBLOCO >
  
	/* PODE OU NÃO TER VÁRIOS IF/FOR/DO ENCADEADO */
  (comando())*
  < FIMBLOCO >

  < TO > expressao_logica()
}

void expressao_logica() : {}
{
		(variavel_if() operador_logico() variavel_if())

			/* POSSIBILIDADE DE COLOCAR MAIS DE UMA CONDIÇÃO LÓGICA NO MESMO IF OU DO WHILE */

		( (< AND > | < OR >) expressao_logica())?
}

void variavel_if() : {} 
{
	      < ID >|< NUMERO > | < PALAVRA >
	
}

void operador_logico() : {} 
{
		< MAIOR >
	|	< MENOR >
	|	< MENOR_IGUAL >
	|	< MAIOR_IGUAL >
	|	< DIFERENTE >
	|	< IGUAL >
}

void declaracaoVariavel():
{}
{
  tipoDado() identificador_variaveis() < PONTOVIRGULA >
}

void identificador_variaveis() : {} 
{
  		/* NOME VARIAVEL */
	  nomeVariavel()

		/* PODE OU NÃO TER ATRIBUIÇÃO */
	  (< ATRIBUICAO > (< ID > | < NUMERO > | < FALSE > | < TRUE >))?

		
	  /* PODE OU NÃO TER MAIS DE UMA VARIÁVEL DECLARADA */
	  (declararMais())?
}

void declararMais(): { }
{

	/* - aqui o token em comum sempre vai ser a vírgula seguida do nome da variável, o que pode ou não ter depois disso
	   é a atribuição, por isso o ? nela.

	   - Esse processo pode se repetir 1x ou mais
	 */
  
  (< VIRGULA > nomeVariavel() (atribuicao())?)+
}

void nomeVariavel(): { }
{
	(< ID > | < LETRA >)
}

void atribuicao(): { }
{
  (< ATRIBUICAO > (< ID > | < NUMERO > | < FALSE > | < TRUE > | < PALAVRA >))
}

void tipoDado(): { }
{
  < INTEIRO >|< BOOLEANA >|< STRING >
}

void expressao_matematica() : {}

{
	(operador_matematico() extremidade_expressao())
}

void extremidade_expressao():{}
{
	< ID > | < NUMERO >
}

void operador_matematico() : {} 
{
		< SOMA >
	|	< SUBTRACAO >
	|	< MULTIPLICACAO >
	|	< DIVISAO >	
	
}
